<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker安装Jenkins</title>
    <link href="/2023/09/21/Docker%E5%AE%89%E8%A3%85Jenkins/"/>
    <url>/2023/09/21/Docker%E5%AE%89%E8%A3%85Jenkins/</url>
    
    <content type="html"><![CDATA[<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>Maven项目仓库地址和一个可以访问此仓库的账户</li><li>一台linux服务器，安装Docker环境并开放远程SSH登录权限</li></ul><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull jenkins/jenkins:<span class="hljs-number">2</span>.<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><h4 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2.启动容器"></a>2.启动容器</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name jenkins -u root  \<br>-d -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> \<br>--restart always \<br>-v <span class="hljs-regexp">/root/</span>dev<span class="hljs-regexp">/docker/</span>jenkins<span class="hljs-regexp">/jenkins_home:/</span>var/jenkins_home  \<br>-v <span class="hljs-regexp">/root/</span>dev<span class="hljs-regexp">/docker/</span>jenkins<span class="hljs-regexp">/maven_repository:/</span>root<span class="hljs-regexp">/.m2/</span>repository \<br>-v <span class="hljs-regexp">/root/</span>dev<span class="hljs-regexp">/docker/</span>jenkins<span class="hljs-regexp">/docker.sock:/</span>var<span class="hljs-regexp">/run/</span>docker.sock \<br>-v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime \<br>jenkins/jenkins:<span class="hljs-number">2.400</span><br></code></pre></td></tr></table></figure><h4 id="3-服务访问"><a href="#3-服务访问" class="headerlink" title="3.服务访问"></a>3.服务访问</h4><p>浏览器访问<code>http://[ip]:8080</code>，打开页面如下图 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_5.png"></p><h4 id="4-管理员密码"><a href="#4-管理员密码" class="headerlink" title="4.管理员密码"></a>4.管理员密码</h4><p>页面中需要输入管理员密码，管理员密码获取方式有多种，下面是我的获取步骤</p><ul><li>宿主机执行命令<code>docker logs jenkins</code>，结果见下图 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_6.png"></li><li>图中红框位置的字符串就是管理员密码，复制出来粘贴到浏览器的管理员密码输入框中，点击继续按钮</li></ul><h4 id="5-安装推荐的插件"><a href="#5-安装推荐的插件" class="headerlink" title="5.安装推荐的插件"></a>5.安装推荐的插件</h4><p>等待大约一分钟时间，出现以下页面，这里我们点击第一个【安装推荐的插件】选项 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_7.png"></p><h4 id="6-开始安装插件"><a href="#6-开始安装插件" class="headerlink" title="6.开始安装插件"></a>6.开始安装插件</h4><p>在接下来的页面中点击【安装】按钮后，就会开始安装插件，安装时间视网速而定，正常网速下大约需要五到十分钟，如果最后出现部分插件安装失败，可以点击重试按钮 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_8.png"></p><h4 id="7-管理员配置"><a href="#7-管理员配置" class="headerlink" title="7.管理员配置"></a>7.管理员配置</h4><p>插件安装完成后进入以下页面，输入相关信息，点击【保存并完成】按钮完成管理员用户创建，此账户用于后续登录jenkins，必须记住 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_9.png" alt="img_9.png"></p><h4 id="8-安装初始化完成"><a href="#8-安装初始化完成" class="headerlink" title="8.安装初始化完成"></a>8.安装初始化完成</h4><p>后续页面点击【保存并完成】按钮和【开始使用jenkins】按钮，进入jenkins的首页，至此jenkins的安装初始化工作已经完成 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_10.png" alt="img_10.png"></p><h4 id="9-插件管理"><a href="#9-插件管理" class="headerlink" title="9.插件管理"></a>9.插件管理</h4><p>点击首页左侧的【Manage Jenkins】菜单按钮，进入设置页面，然后点击【Plugins】选项卡片，进入插件管理页面 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_11.png" alt="img_11.png"></p><h4 id="10-安装其他插件"><a href="#10-安装其他插件" class="headerlink" title="10.安装其他插件"></a>10.安装其他插件</h4><p>在插件管理页面如图位置，搜索<code>Maven Integration/Publish Over SSH</code>，然后安装，安装完成后jenkins会自动重启，重启后需要使用第七步注册的账户登录</p><ul><li>Maven Integration：maven编译、打包所需插件</li><li>Publish Over SSH：推送文件到远程服务器所需插件</li></ul><p><img src="https://qiniu.oss.itgone.com/docker_jenkins/img_12.png" alt="img_12.png"></p><h4 id="11-重启服务"><a href="#11-重启服务" class="headerlink" title="11.重启服务"></a>11.重启服务</h4><p>服务重启，需要重新登录后，进入首页如下图 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_13.png" alt="img_13.png"></p><h4 id="12-Maven全局配置"><a href="#12-Maven全局配置" class="headerlink" title="12.Maven全局配置"></a>12.Maven全局配置</h4><p>点击左侧【系统管理】菜单，然后点击【全局工具配置】页签，在页面最下方找到Maven配置，点击”新增Maven“按钮，进行全局Maven配置，配置参考下图 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_16.png" alt="img_16.png"></p><h4 id="13-配置远程服务器"><a href="#13-配置远程服务器" class="headerlink" title="13.配置远程服务器"></a>13.配置远程服务器</h4><p>返回到首页，点击左侧【系统管理】菜单，然后点击系统【配置页签】，在页面最下方找到【Publish over SSH】配置，此处是配置远程服务器相关信息，具体配置参考下图 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_18.png" alt="img_18.png"><img src="https://qiniu.oss.itgone.com/docker_jenkins/img_19.png" alt="img_19.png"></p><h4 id="14-新建任务"><a href="#14-新建任务" class="headerlink" title="14.新建任务"></a>14.新建任务</h4><p>返回到首页，点击左侧【新建任务】菜单，接下来的页面中输入任务名称，选择下面【构建一个自由风格的软件项目】选项，然后点击【确定】按钮，进入页面如下图 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_14.png" alt="img_14.png"></p><h4 id="15-配置项目Git地址"><a href="#15-配置项目Git地址" class="headerlink" title="15.配置项目Git地址"></a>15.配置项目Git地址</h4><p>我们首先需要配置项目git仓库地址，如果此仓库需要认证访问，则点击【添加】按钮，为此仓库配置一个具有拉取代码权限的用户信息，并在【Credentials】下拉框中选中使用 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_15.png" alt="img_15.png"></p><h4 id="16-为任务配置Maven"><a href="#16-为任务配置Maven" class="headerlink" title="16.为任务配置Maven"></a>16.为任务配置Maven</h4><p>在【Build Steps】页签下，点击【增加构建步骤]按钮，下拉选项中选择【调用顶层Maven目标】，后续配置参考下图</p><ul><li>clean package -Dmaven.test.skip&#x3D;true 清除历史并打包（跳过单元测试） <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_17.png" alt="img_17.png"></li></ul><h4 id="17-配置SSH远程推送"><a href="#17-配置SSH远程推送" class="headerlink" title="17.配置SSH远程推送"></a>17.配置SSH远程推送</h4><p>在【构建后操作】页签下，点击【增加构建后操作步骤】按钮，下拉选项中选择【Send build artifacts over SSH】，此配置目标是推送打包后的jar包到远程服务器，实现部署 具体配置参考下图，【Exec command】是推送jar包到远程服务器后，服务部署相关命令，需要根据各自情况修改，配置完成后点击应用和保存按钮 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_20.png" alt="img_20.png"></p><h4 id="18-任务部署"><a href="#18-任务部署" class="headerlink" title="18.任务部署"></a>18.任务部署</h4><p>返回到首页，点击右侧【部署】按钮，启动部署，由于初次部署需要安装Maven、下载相关Maven依赖，所以首次执行需要较多时间，大约需要20-30分钟 <img src="https://qiniu.oss.itgone.com/docker_jenkins/img_21.png" alt="img_21.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker部署基于WordPress的个人博客网站</title>
    <link href="/2023/09/19/Docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E4%BA%8EWordPress%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2023/09/19/Docker%E9%83%A8%E7%BD%B2%E5%9F%BA%E4%BA%8EWordPress%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p><strong>WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。如果你重点关注于博客记录、技术分享，想快速搭建自己的博客网站，那么使用WordPress会是一个比较好的方案。</strong></p><h3 id="本文操作环境"><a href="#本文操作环境" class="headerlink" title="本文操作环境"></a>本文操作环境</h3><ul><li>Ubuntu23服务器环境</li><li>安装Docker和docker-compose环境</li></ul><p>相关环境安装搭建本文不再描述，请自行安装</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h4><p>服务器执行命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull wordpress:<span class="hljs-number">6</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2.启动容器"></a>2.启动容器</h4><p>搭建WordPress需要启动<code>wordpress</code>和<code>mysql</code>两个容器，有两种启动方式（下面两种方式，都需要替换其中相关参数后执行）：</p><ul><li>命令启动</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 启动MySql数据库容器</span><br>docker <span class="hljs-built_in">run</span> -p 3306:3306 <span class="hljs-attribute">--restart</span>=always  --name mysql  \<br>-e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=ROOT_PASSWORD \<br>-e <span class="hljs-attribute">MYSQL_DATABASE</span>=DatabaseName \<br>-e <span class="hljs-attribute">MYSQL_USER</span>=USERNAME \<br>-e <span class="hljs-attribute">MYSQL_PASSWORD</span>=PASSWORD \<br>-v /opt/docker/mysql/logs:/logs \<br>-v /opt/docker/mysql/data:/var/lib/mysql \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 启动WordPress容器</span><br>docker run -d \<br>--privileged=true \<br>--restart=always \<br>--name wordpress \<br>-p <span class="hljs-number">8088</span>:<span class="hljs-number">80</span> \<br>-e WORDPRESS_DB_HOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">3.168</span>:<span class="hljs-number">3306</span> \<br>-e WORDPRESS_DB_USER=USERNAME \<br>-e WORDPRESS_DB_PASSWORD=PASSWORD \<br>-e WORDPRESS_DB_NAME=DatabaseName \<br>-v <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/wordpress/</span>html:<span class="hljs-regexp">/var/</span>www/html \<br>-v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime:ro \<br>-v <span class="hljs-regexp">/etc/</span>timezone:<span class="hljs-regexp">/etc/</span>timezone:ro \<br>wordpress:<span class="hljs-number">6.3</span><br></code></pre></td></tr></table></figure><ul><li>docker-comppose启动</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-comment"># Defines which compose version to use</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-comment"># Services line define which Docker images to run. In this case, it will be MySQL server and WordPress image.</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">&quot;wordpress-db&quot;</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>    <span class="hljs-comment"># image: mysql:5.7 indicates the MySQL database container image from Docker Hub used in this installation.</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">MyR00tMySQLPa$$5w0rD</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">MyWordPressDatabaseName</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">MyWordPressUser</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">Pa$$5w0rD</span><br>      <span class="hljs-comment"># Previous four lines define the main variables needed for the MySQL container to work: database, database username, database user password, and the MySQL root password.</span><br>  <span class="hljs-attr">wordpress:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">&quot;wordpress&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wordpress:6.3</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-comment"># Restart line controls the restart mode, meaning if the container stops running for any reason, it will restart the process immediately.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:80&quot;</span><br>      <span class="hljs-comment"># The previous line defines the port that the WordPress container will use. After successful installation, the full path will look like this: http://localhost:8000</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">WORDPRESS_DB_HOST:</span> <span class="hljs-string">db:3306</span><br>      <span class="hljs-attr">WORDPRESS_DB_USER:</span> <span class="hljs-string">MyWordPressUser</span><br>      <span class="hljs-attr">WORDPRESS_DB_PASSWORD:</span> <span class="hljs-string">Pa$$5w0rD</span><br>      <span class="hljs-attr">WORDPRESS_DB_NAME:</span> <span class="hljs-string">MyWordPressDatabaseName</span><br>    <span class="hljs-comment"># Similar to MySQL image variables, the last four lines define the main variables needed for the WordPress container to work properly with the MySQL container.</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/opt/docker/wordpress/html:/var/www/html&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/localtime:/etc/localtime:ro&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/timezone:/etc/timezone:ro&quot;</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">mysql:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>上述内容在服务器中保存为docker-compose.yaml文件，然后在同级目录下执行以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose  up -d</span><br></code></pre></td></tr></table></figure><h4 id="3-初始化博客"><a href="#3-初始化博客" class="headerlink" title="3.初始化博客"></a>3.初始化博客</h4><ul><li>浏览器中访问<code>服务器IP:8088</code>地址，进入下面的页面，选择【简体中文】，然后点击【继续】按钮<br><img src="https://qiniu.oss.itgone.com/wordpress/img.png" alt="img.png"></li><li>此页面是配置WordPress博客基本信息，用户名和密码必须记住，后续登录博客后台管理需要使用，填写完毕点击【安装WordPress】<br><img src="https://qiniu.oss.itgone.com/wordpress/img_1.png" alt="img_1.png"></li><li>出现以下页面，说明博客已经安装和初始化成功，点击【登录】按钮，输入用户名和密码进入博客后台管理页面<br><img src="https://qiniu.oss.itgone.com/wordpress/img_2.png" alt="img_2.png"><br><img src="https://qiniu.oss.itgone.com/wordpress/img_3.png" alt="img_3.png"></li></ul><h4 id="4-上传文件大小限制修改"><a href="#4-上传文件大小限制修改" class="headerlink" title="4.上传文件大小限制修改"></a>4.上传文件大小限制修改</h4><p>由于后续需要修改主题，涉及文件上传，WordPress默认上传文件最大限制为2MB，而实际主题文件可能会超过这个限制，所以需要提前对此项配置进行修改。<br>具体配置修改步骤如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 复制容器中的配置文件到宿主机，重命名为php.ini</span><br>docker cp wordpress:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php/php.ini-development php.ini<br><br><span class="hljs-comment"># 修改配置 upload_max_filesize = 20M</span><br>vim php.ini<br><br><span class="hljs-comment"># 修改后的配置文件拷贝进容器</span><br>docker cp php.ini wordpress:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>php<br><br><span class="hljs-comment"># 重启WordPress服务</span><br>docker restart wordpress<br></code></pre></td></tr></table></figure><h4 id="5-添加Argon博客主题"><a href="#5-添加Argon博客主题" class="headerlink" title="5.添加Argon博客主题"></a>5.添加Argon博客主题</h4><p>WordPress有许多第三方开发的免费模板，安装方式简单易用。进入博客后台管理页面后，点击左侧菜单【外观】-【主题】按钮可以进入主题配置页面。<br>作者本次将要介绍使用的是Argon主题模板，还有很多其他优秀的主题模板，可以自行了解使用。<br>Argon是一款简介、好看、开源的WordPress主题模板，仓库地址为<code>https://github.com/solstice23/argon-theme.git</code>。<br>添加Argon博客主题步骤如下：</p><ul><li>点击下载<a href="https://github.com/solstice23/argon-theme/releases/download/v1.3.5/argon.zip">Argon主题</a>，Argon主题其他版本可访问项目仓库地址进行下载</li><li>进入博客后台管理-主题配置页面，点击【上传主题】按钮，选择下载好的Argon主题压缩包，点击【立即安装】按钮，出现下面的页面表明主题安装成功<br><img src="https://qiniu.oss.itgone.com/wordpress/img_4.png" alt="img_4.png"></li><li>点击【启用按钮】，开始使用Argon主题</li></ul><h4 id="6-安装Markdown插件"><a href="#6-安装Markdown插件" class="headerlink" title="6.安装Markdown插件"></a>6.安装Markdown插件</h4><p>WordPress发布文章时，自带的会有一个文档编辑器，类似于Word那种形式，使用起来并不是很友好，作者习惯使用Markdown语法编辑文章。<br>进入博客后台管理-插件-安装插件页面，搜索<code>WP Markdown Editor</code>插件，然后点击【立即安装】，安装完成后点击【启用】按钮<br><img src="https://qiniu.oss.itgone.com/wordpress/img_5.png" alt="img_5.png"></p><h4 id="7-发布第一篇文章"><a href="#7-发布第一篇文章" class="headerlink" title="7.发布第一篇文章"></a>7.发布第一篇文章</h4><p>安装并启用Markdown插件后，就可以使用Markdown语法编辑文章并发布。</p><ul><li>进入博客后台管理-文章-写文章页面，输入文章标题、内容后，点击右侧【发布按钮】进行文章发布<br><img src="https://qiniu.oss.itgone.com/wordpress/img_6.png" alt="img_6.png"></li><li>浏览器输入<code>服务器IP:8088</code>地址就可以进入博客站点，至此博客基本搭建完成<br><img src="https://qiniu.oss.itgone.com/wordpress/img_7.png" alt="img_7.png"></li></ul><h4 id="8-更换站点图标"><a href="#8-更换站点图标" class="headerlink" title="8.更换站点图标"></a>8.更换站点图标</h4><p>进入博客后台管理-外观-自定义-站点身份-选择站点图标页面，然后上传合适的图片后，点击【发布】按钮，站点图标修改成功<br><img src="https://qiniu.oss.itgone.com/wordpress/img_8.png" alt="img_8.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>WordPress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号使用Markdown语法发布文章</title>
    <link href="/2023/09/19/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BD%BF%E7%94%A8Markdown%E8%AF%AD%E6%B3%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <url>/2023/09/19/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BD%BF%E7%94%A8Markdown%E8%AF%AD%E6%B3%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>默认情况下，微信公众号平台创作文章时，只支持富文本编辑器，但是很多博客、技术网站都主要采用Markdown语法编辑文章，所以如何把使用Markdown语法编写的文章快速迁移到微信公众号呢？</p><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>win10机器</li><li>安装Google Chrome浏览器</li></ul><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="1-下载浏览器插件"><a href="#1-下载浏览器插件" class="headerlink" title="1. 下载浏览器插件"></a>1. 下载浏览器插件</h4><ul><li>点击此处下载<a href="https://qiniu.oss.itgone.com/markdown_wx/MarkdownNice1.3.1.crx">Markdown Nice</a></li></ul><h4 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h4><ul><li>直接拖动上一步下载好的MarkdownNice1.3.1.crx文件到Google Chrome浏览器的扩展程序管理窗口 <img src="https://qiniu.oss.itgone.com/markdown_wx/52f16169dbc34b2fb26b4315f86c64fe.png"></li><li>然后点击弹框中的【添加扩展程序】按钮 <img src="https://qiniu.oss.itgone.com/markdown_wx/fbdf811c8d6b4badb5a28c20e9d6f45b.png"></li><li>出下图说明插件安装成功 <img src="https://qiniu.oss.itgone.com/markdown_wx/d5eb4515d42543a5bbeaa050170836bd.png"></li></ul><h4 id="3-插件使用"><a href="#3-插件使用" class="headerlink" title="3. 插件使用"></a>3. 插件使用</h4><ul><li>进入公众号新建图文消息页面，【按钮1】是“MD预览窗口开关”，【按钮2】是“编辑器切换开关” <img src="https://qiniu.oss.itgone.com/markdown_wx/f13dd133f8d744f2830b483533d47df6.png"></li><li>打开编辑器切换开关，然后使用Markdown语法在右侧文章编译框中编写文章</li><li>编写完成后，关闭“编辑器切换开关”，此时右侧文章编辑框的内容全部清空了</li><li>点击“MD预览窗口开关”，切换到MD预览窗口，鼠标悬浮在左侧预览窗口内，预览窗口顶部会自动弹出”点击插入微信编辑器”消息提示</li><li>按提示在左侧MD预览窗口内部任意位置单击鼠标左键，此时发现右侧文章编辑框内已经填充好Markdown样式的文章内容 <img src="https://qiniu.oss.itgone.com/markdown_wx/b41183047089402d957f3151ccb7625a.png"></li><li>通过微信公众号文章预览功能，在手机上就可以预览到发布后的文章效果啦</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
